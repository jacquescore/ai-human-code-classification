task,code

"Given an array arr[], the task is to find the subarray that has the maximum sum and return its sum.","# Python Program for Maximum Subarray Sum using Kadane's Algorithm

# Function to find the maximum subarray sum
def maxSubarraySum(arr):
    
    res = arr[0]
    maxEnding = arr[0]

    for i in range(1, len(arr)):
        
        # Find the maximum sum ending at index i by either extending 
        # the maximum sum subarray ending at index i - 1 or by
        # starting a new subarray from index i
        maxEnding = max(maxEnding + arr[i], arr[i])
        
        # Update res if maximum subarray sum ending at index i > res
        res = max(res, maxEnding)
    
    return res

arr = [2, 3, -8, 7, -1, 2, 3]
print(maxSubarraySum(arr))"

"Given an array arr[] of size n-1 with integers in the range of [1, n], the task is to find the missing number from the first n integers. Note: There are no duplicates in the list.","# Python program to find the missing number

def missingNumber(arr):
    n = len(arr) + 1

    # Calculate the sum of array elements
    totalSum = sum(arr)

    # Calculate the expected sum
    expectedSum = (n * (n + 1)) // 2

    # Return the missing number
    return expectedSum - totalSum

 
arr = [1, 2, 3, 5]
print(missingNumber(arr))"

"Trapping Rainwater Problem states that given an array of n non-negative integers arr[] representing an elevation map where the width of each bar is 1, compute how much water it can trap after rain.","def maxWater(arr):
    left = 1
    right = len(arr) - 2

    # lMax : Maximum in subarray arr[0..left-1]
    # rMax : Maximum in subarray arr[right+1..n-1]
    lMax = arr[left - 1]
    rMax = arr[right + 1]

    res = 0
    while left <= right:
      
        # If rMax is smaller, then we can decide the 
        # amount of water for arr[right]
        if rMax <= lMax:
          
            # Add the water for arr[right]
            res += max(0, rMax - arr[right])

            # Update right max
            rMax = max(rMax, arr[right])

            # Update right pointer as we have decided 
            # the amount of water for this
            right -= 1
        else: 
          
            # Add the water for arr[left]
            res += max(0, lMax - arr[left])

            # Update left max
            lMax = max(lMax, arr[left])

            # Update left pointer as we have decided 
            # the amount of water for this
            left += 1
    return res

arr = [2, 1, 5, 3, 1, 0, 4]
print(maxWater(arr))"

"Given an integer array, the task is to find the maximum product of any subarray.","# Python program to find Maximum Product Subarray using Minimum
# Maximum Product ending at every index

# function to find the product of max product subarray.
def max_product(arr):
    n = len(arr)

    # max product ending at the current index
    currMax = arr[0]

    # min product ending at the current index
    currMin = arr[0]

    # Initialize overall max product
    maxProd = arr[0]

    # Iterate through the array
    for i in range(1, n):

        # Temporary variable to store the maximum product ending
        # at the current index
        temp = max(arr[i], arr[i] * currMax, arr[i] * currMin)

        # Update the minimum product ending at the current index
        currMin = min(arr[i], arr[i] * currMax, arr[i] * currMin)

        # Update the maximum product ending at the current index
        currMax = temp

        # Update the overall maximum product
        maxProd = max(maxProd, currMax)

    return maxProd


arr = [-2, 6, -3, -10, 0, 2]
print(max_product(arr))"

"Given an array arr[] of size n, return an equilibrium index (if any) or -1 if no equilibrium index exists. The equilibrium index of an array is an index such that the sum of elements at lower indexes equals the sum of elements at higher indexes.Note: Return equilibrium point in 1-based indexing. Return -1 if no such point exists.","# Python Program to find the equilibrium point

def equilibriumPoint(arr):
    n = len(arr)
    left = 0
    pivot = 0
    right = sum(arr[1:])  # Calculate the right sum excluding the first element

    # Iterate pivot over all the elements of the array until left != right
    while pivot < n - 1 and right != left:
        pivot += 1
        right -= arr[pivot]
        left += arr[pivot - 1]

    # If left == right, return pivot as the equilibrium index
    return pivot + 1 if left == right else -1



# Sample Input
arr = [1, 7, 3, 6, 5, 6]

result = equilibriumPoint(arr)
print(result)"