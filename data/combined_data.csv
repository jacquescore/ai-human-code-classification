task,code,label
"Given an array arr[], the task is to find the subarray that has the maximum sum and return its sum.","def maxSubarraySum(arr):
    res = arr[0]
    maxEnding = arr[0]
    for i in range(1, len(arr)):
        maxEnding = max(maxEnding + arr[i], arr[i])
        res = max(res, maxEnding)
    return res
arr = [2, 3, -8, 7, -1, 2, 3]
print(maxSubarraySum(arr))",human
"Given an array arr[] of size n-1 with integers in the range of [1, n], the task is to find the missing number from the first n integers. Note: There are no duplicates in the list.","def missingNumber(arr):
    n = len(arr) + 1
    totalSum = sum(arr)
    expectedSum = (n * (n + 1)) // 2
    return expectedSum - totalSum
arr = [1, 2, 3, 5]
print(missingNumber(arr))",human
"Trapping Rainwater Problem states that given an array of n non-negative integers arr[] representing an elevation map where the width of each bar is 1, compute how much water it can trap after rain.","def maxWater(arr):
    left = 1
    right = len(arr) - 2
    lMax = arr[left - 1]
    rMax = arr[right + 1]
    res = 0
    while left <= right:
        if rMax <= lMax:
            res += max(0, rMax - arr[right])
            rMax = max(rMax, arr[right])
            right -= 1
        else: 
            res += max(0, lMax - arr[left])
            lMax = max(lMax, arr[left])
            left += 1
    return res
arr = [2, 1, 5, 3, 1, 0, 4]
print(maxWater(arr))",human
"Given an integer array, the task is to find the maximum product of any subarray.","def max_product(arr):
    n = len(arr)
    currMax = arr[0]
    currMin = arr[0]
    maxProd = arr[0]
    for i in range(1, n):
        temp = max(arr[i], arr[i] * currMax, arr[i] * currMin)
        currMin = min(arr[i], arr[i] * currMax, arr[i] * currMin)
        currMax = temp
        maxProd = max(maxProd, currMax)
    return maxProd
arr = [-2, 6, -3, -10, 0, 2]
print(max_product(arr))",human
"Given an array arr[] of size n, return an equilibrium index (if any) or -1 if no equilibrium index exists. The equilibrium index of an array is an index such that the sum of elements at lower indexes equals the sum of elements at higher indexes.Note: Return equilibrium point in 1-based indexing. Return -1 if no such point exists.","def equilibriumPoint(arr):
    n = len(arr)
    left = 0
    pivot = 0
    right = sum(arr[1:])  
    while pivot < n - 1 and right != left:
        pivot += 1
        right -= arr[pivot]
        left += arr[pivot - 1]
    return pivot + 1 if left == right else -1
arr = [1, 7, 3, 6, 5, 6]
result = equilibriumPoint(arr)
print(result)",human
"Given an array arr[], the task is to find the subarray that has the maximum sum and return its sum.","def max_subarray_sum(arr):
    max_sum = arr[0]
    current_sum = arr[0]
    for i in range(1, len(arr)):
        current_sum = max(arr[i], current_sum + arr[i])
        max_sum = max(max_sum, current_sum)
    return max_sum
arr = [2, 3, -8, 7, -1, 2, 3]
print(max_subarray_sum(arr))  ",ai
"Given an array arr[] of size n-1 with integers in the range of [1, n], the task is to find the missing number from the first n integers. Note: There are no duplicates in the list.","def find_missing_number(arr, n):
    expected_sum = n * (n + 1) // 2
    actual_sum = sum(arr)
    return expected_sum - actual_sum
arr = [1, 2, 3, 5]
n = 5
print(find_missing_number(arr, n))  ",ai
"Trapping Rainwater Problem states that given an array of n non-negative integers arr[] representing an elevation map where the width of each bar is 1, compute how much water it can trap after rain.","def trap_rainwater(arr):
    n = len(arr)
    if n < 3:
        return 0
    left_max = [0] * n
    right_max = [0] * n
    water_trapped = 0
    left_max[0] = arr[0]
    for i in range(1, n):
        left_max[i] = max(left_max[i - 1], arr[i])
    right_max[n - 1] = arr[n - 1]
    for i in range(n - 2, -1, -1):
        right_max[i] = max(right_max[i + 1], arr[i])
    for i in range(n):
        water_trapped += max(0, min(left_max[i], right_max[i]) - arr[i])
    return water_trapped
arr = [2, 1, 5, 3, 1, 0, 4]
print(trap_rainwater(arr))  ",ai
"Given an integer array, the task is to find the maximum product of any subarray.","def max_product_subarray(arr):
    n = len(arr)
    if n == 0:
        return 0
    max_product = arr[0]
    current_max = arr[0]
    current_min = arr[0]
    for i in range(1, n):
        if arr[i] < 0:
            current_max, current_min = current_min, current_max
        current_max = max(arr[i], current_max * arr[i])
        current_min = min(arr[i], current_min * arr[i])
        max_product = max(max_product, current_max)
    return max_product
arr = [-2, 6, -3, -10, 0, 2]
print(max_product_subarray(arr))  ",ai
"Given an array arr[] of size n, return an equilibrium index (if any) or -1 if no equilibrium index exists. The equilibrium index of an array is an index such that the sum of elements at lower indexes equals the sum of elements at higher indexes.Note: Return equilibrium point in 1-based indexing. Return -1 if no such point exists.","def find_equilibrium_index(arr):
    total_sum = sum(arr)
    left_sum = 0
    for i in range(len(arr)):
        if left_sum == (total_sum - left_sum - arr[i]):
            return i + 1  
        left_sum += arr[i]
    return -1
arr = [1, 7, 3, 6, 5, 6]
print(find_equilibrium_index(arr))  ",ai
